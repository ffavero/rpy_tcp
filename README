If you need to generate images, graphs, or perform a  statistical 
analysis, in a Web application, R-cran is a very helpful resource.

In order to do so there are few options, most of them require to run R 
directly on the Web-server (Rapache for instance, or Rpy on 
CGI/mod_perl).
Most system Admin are not happy about that, because R might have some 
bad influence on the server performance, degrading the performance of 
all the server, and all the consequential implications.

A solution can be reached by the implementation of a small socket 
server, written in python and using the Rpy library to execute R 
functions passed from a proper client script.

basic usage:

implement a small function in Rpy2 in the file server/utils/functions.py,
and insert the name and corrisponding CODE in the python dictionary "FUCS":

FUNCTS = {
 'VERSION': 'version',
}

def version():
   res = robjects.r('R.version')
   return res

#Server Start:
python server/rpyserver.py 9999

# Write a simple client that stream a JSON encoded file...
# (to implement in future functions with arguments)

python client/rpyclient.py localhost:9999 VERSION


#or with Arguments: each argument is ; separated, with no quote!

python client/rpyclient.py localhost:9999 PLOT1 'file.pdf;1,2,3,4,5,6,7,8,9,10;1,2,3,4,5,6,7,8,9,10'



OLD.....
# Client
python rpyclient.py localhost:9999 'pdf(file="plot1.pdf")/plot(x=c(1:10),y=c(1:10))/dev.off()'
# in order to see the system under heavy computation: (can be done in different client also)
python rpyclient.py localhost:9999 'pdf(file="plot1.pdf")/plot(x=c(1:1000000),y=c(1:1000000))/dev.off()'

We can also add a final command to purge the memory after the end of a 
process:

python client/rpyclient.py localhost:9999 \
'pdf(file="plot1.pdf")/plot(x=c(1:10000000),y=c(1:10000000))/dev.off()' & \
python client/rpyclient.py localhost:9999  \
'pdf(file="plot1.pdf")/plot(x=c(1:10000000),y=c(1:10000000))/dev.off()' 

We can se in a Systme monitor that afer generating a considerable amount 
of memory the server will not reduce the RAM occupied. However we can 
manually reset at default state:

python client/rpyclient.py localhost:9999 'rm(list = ls())/gc()'

